studyCode = 'CAPS';
taskCode = 'ALERT';
DIR.bx = ['~/Desktop/' studyCode '_BxData/pilot/tasks/' taskCode];
DIR.out = [DIR.bx filesep 'output_recoveredResp'];
DIR.rating = [DIR.bx filesep 'ratings'];
DIR.in = [DIR.bx filesep 'input'];
DIR.vec = [DIR.bx filesep 'vecs'];
DIR.thisFunk = ['~/Desktop/' studyCode '_scripts/behavioral/scripts/makeVecs/'];
DIR.compiled = [DIR.bx filesep 'compiled'];

subList = [203 219];
nRuns = 2;
masterRatingMat = nan(max(subList),6);
filenames.template = '/Users/laurenkahn/Desktop/CAPS_BxData/pilot/tasks/ALERT/output/sub-203_ses-1_task-ALERT_run-1_beh.mat';

% Get event indices
load(filenames.template)
isER = cell2mat(cellfun(@(x) strcmp(x(1:2),'ER'),run_info.tag,'UniformOutput',false));
isAL = cell2mat(cellfun(@(x) strcmp(x(1:2),'AL'),run_info.tag,'UniformOutput',false));
isJL = cell2mat(cellfun(@(x) strcmp(x(1:2),'JL'),run_info.tag,'UniformOutput',false));
isNeut = cell2mat(cellfun(@(x) strcmp(x(end-3:end),'tral'),run_info.tag,'UniformOutput',false));
isNeg = cell2mat(cellfun(@(x) strcmp(x(end-2:end),'neg'),run_info.tag,'UniformOutput',false));
isRating = cell2mat(cellfun(@(x) strcmp(x,'distress'),run_info.tag,'UniformOutput',false));

for s = subList
    currentSubRatings = [];
    
    if s<10
        placeholder = '00';
    elseif s<100
        placeholder = '0';
    else
        placeholder = '';
    end
    subjectCode = [studyCode placeholder num2str(s)];
    
    for r=1:nRuns
        
        filenames.out =  [DIR.out filesep 'sub-' subjectCode(end-2:end) '_ses-1_task-' taskCode '_run-' num2str(r) '_beh.mat'];
        filenames.rating =  [DIR.rating filesep subjectCode '_run' num2str(r) '_ratings'];
        
        if ~exist(filenames.out,'file')
            warning('No output file found for subject %d, run %d.\n',s,r);% import input file to determine eventIndices DO THIS
        else
            
            % import output file to determine actual onsets/duration
            load(filenames.out)
            
            % Extract responses
            responses = run_info.responses(isRating);
            for resp = find(isRating)'
                if isempty(run_info.responses{resp})
                    run_info.responses{resp} = NaN;
                    warning('missing response for run %d, event %d', r, resp)
                else
                    run_info.responses{resp} = str2num(run_info.responses{resp});
                end
            end
            
            ratings(:) = run_info.responses(logical([0;0;(isER & isNeg)]))';
            responses{2} = run_info.responses(logical([0;0;(isER & isNeut)])';
            responses{3} = run_info.responses(logical([0;0;(isAL & isNeg)]))';
            ratings{4} = run_info.responses(logical([0;0;(isAL & isNeut)]))';
            ratings{5} = run_info.responses(logical([0;0;(isJL & isNeg)]))';
            ratings{6} = run_info.responses(logical([0;0;(isJL & isNeut)]))';
            
            ratingLog = [];
            for cond=1:length(ratings)
                nRatings(cond) = size(ratings{cond},2);
                ratingLog = [ratingLog;[cond*ones(nRatings(cond)) ratings{cond}]];
                
            end
            
            
            save(filenames.rating,'responses')
            fid = fopen([filenames.rating '.txt'],'w');
            fprintf(fid,'%s\t%s\t%s\t%s\n','therapy','relevance','helpfulness','liking');
            for l=1:size(ratings,1)
                fprintf(fid,'%d\t%d\t%d\t%d\t%d\t%d\t%d\n', ratings(l,1),ratings(l,2),ratings(l,3),ratings(l,4),ratings(l,5),ratings(l,6),,ratings(l,7));
            end
            fclose(fid);
            
            currentSubRatings = [currentSubRatings; ratings(:,2:7)];
            
        end
    end
    
    condMeans = nanmean(currentSubRatings);
    overallMeans = nanmean();
    
    ratingMeans(s,1:6) = condMeans;
    ratingMeans(s,7) = overallMeans;
    
end

dlmwrite([DIR.compiled filesep 'ratingMeans.txt'],ratingMeans,'delimiter','\t')
save([DIR.compiled filesep 'ratingMeans.mat'],'ratingMeans')
